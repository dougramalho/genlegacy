{"components": [{"path": "D:\\pessoal\\projetos\\surety-bond-system\\src\\business.cpp", "type": "source", "includes": ["string.h", "business.h", "iostream"], "namespaces": [], "classes": [], "functions": [{"return_type": "char*", "name": "getLastError", "line": 8, "content": "}\n\nconst char* getLastError() {{\n\n    return g_lastError;\n}"}, {"return_type": "bool", "name": "validateDocumentNumber", "line": 12, "content": "}\n\nbool validateDocumentNumber(const char* docNumber) {{\n\n    // Valida\u00e7\u00e3o simplificada de CNPJ\n    int len = strlen(docNumber);\n    if(len != 14) {\n        setLastError(\"Document number must have 14 digits\");\n        return false;\n    }\n    \n    // Verifica se s\u00e3o todos n\u00fameros\n    for(int i = 0; i < len; i++) {\n        if(docNumber[i] < '0' || docNumber[i] > '9') {\n            setLastError(\"Document number must contain only digits\");\n            return false;\n        }\n    }\n    \n    return true;\n}"}, {"return_type": "bool", "name": "validateContractDates", "line": 31, "content": "}\n\nbool validateContractDates(time_t startDate, time_t endDate) {{\n\n    // Verifica se a data final \u00e9 posterior \u00e0 data inicial\n    if(endDate <= startDate) {\n        setLastError(\"End date must be after start date\");\n        return false;\n    }\n    \n    // Verifica se a data inicial n\u00e3o \u00e9 passada\n    time_t now;\n    time(&now);\n    if(startDate < now) {\n        setLastError(\"Start date cannot be in the past\");\n        return false;\n    }\n    \n    return true;\n}"}, {"return_type": "bool", "name": "validateContractValue", "line": 49, "content": "}\n\nbool validateContractValue(double value) {{\n\n    if(value <= 0) {\n        setLastError(\"Contract value must be positive\");\n        return false;\n    }\n    \n    if(value < MIN_CONTRACT_VALUE) {\n        setLastError(\"Contract value below minimum allowed\");\n        return false;\n    }\n    \n    if(value > MAX_CONTRACT_VALUE) {\n        setLastError(\"Contract value above maximum allowed\");\n        return false;\n    }\n    \n    return true;\n}"}, {"return_type": "bool", "name": "validateEndorsement", "line": 68, "content": "}\n\nbool validateEndorsement(const Contract& contract, const Endorsement& endorsement) {{\n\n    if(!contract.active) {\n        setLastError(\"Cannot endorse inactive contract\");\n        return false;\n    }\n    \n    switch(endorsement.type) {\n        case 'I':  // Increase\n            if(contract.contractValue + endorsement.changeValue > MAX_CONTRACT_VALUE) {\n                setLastError(\"Endorsement would exceed maximum contract value\");\n                return false;\n            }\n            break;\n            \n        case 'D':  // Decrease\n            if(contract.contractValue - endorsement.changeValue < MIN_CONTRACT_VALUE) {\n                setLastError(\"Endorsement would result in contract value below minimum\");\n                return false;\n            }\n            break;\n            \n        case 'C':  // Cancel\n            // Sempre permite cancelamento\n            break;\n            \n        default:\n            setLastError(\"Invalid endorsement type\");\n            return false;\n    }\n    \n    return true;\n}"}, {"return_type": "double", "name": "calculatePremium", "line": 101, "content": "}\n\ndouble calculatePremium(const Contract& contract) {{\n\n    double totalPremium = 0.0;\n    \n    // Para cada cobertura no contrato\n    for(int i = 0; i < contract.coverageCount; i++) {\n        Coverage* coverage = findCoverage(contract.coverageIds[i]);\n        if(coverage && coverage->active) {\n            // Calcula o pr\u00eamio baseado na taxa da cobertura\n            totalPremium += contract.contractValue * coverage->premiumRate;\n        }\n    }\n    \n    // Aplica desconto por volume se aplic\u00e1vel\n    if(contract.contractValue > 1000000.0) {\n        totalPremium *= 0.95;  // 5% de desconto\n    }\n    \n    return totalPremium;\n}"}, {"return_type": "void", "name": "generatePolicyNumber", "line": 121, "content": "}\n\nvoid generatePolicyNumber(char* policyNumber, int contractNumber) {{\n\n    // Formato: ANO-SEQUENCIAL (exemplo: 2024-00001)\n    time_t now;\n    time(&now);\n    struct tm* timeinfo = localtime(&now);\n    \n    sprintf(policyNumber, \"%d-%05d\", \n            timeinfo->tm_year + 1900, \n            contractNumber);\n}"}], "templates": [], "operators": [], "dependencies": ["D:\\pessoal\\projetos\\surety-bond-system\\src\\business.cpp"], "used_by": ["D:\\pessoal\\projetos\\surety-bond-system\\src\\menu.cpp", "D:\\pessoal\\projetos\\surety-bond-system\\src\\business.cpp", "D:\\pessoal\\projetos\\surety-bond-system\\src\\database.cpp", "D:\\pessoal\\projetos\\surety-bond-system\\src\\main.cpp"]}, {"path": "D:\\pessoal\\projetos\\surety-bond-system\\src\\business.h", "type": "header", "includes": ["globals.h"], "namespaces": [], "classes": [], "functions": [], "templates": [], "operators": [], "dependencies": ["D:\\pessoal\\projetos\\surety-bond-system\\src\\globals.h"], "used_by": []}, {"path": "D:\\pessoal\\projetos\\surety-bond-system\\src\\database.cpp", "type": "source", "includes": ["iomanip", "database.h", "business.h", "iostream"], "namespaces": [], "classes": [], "functions": [{"return_type": "bool", "name": "saveContract", "line": 17, "content": "}\n\nbool saveContract(const Contract& contract) {{\n\n    // Valida\u00e7\u00f5es b\u00e1sicas\n    if(!validateContractValue(contract.contractValue)) {\n        return false;\n    }\n    \n    if(!validateContractDates(contract.startDate, contract.endDate)) {\n        return false;\n    }\n    \n    // Verifica se tomador existe\n    bool policyholderFound = false;\n    for(size_t i = 0; i < g_policyholders.size(); i++) {\n        if(g_policyholders[i].id == contract.policyHolderId) {\n            policyholderFound = true;\n            break;\n        }\n    }\n    \n    if(!policyholderFound) {\n        setLastError(\"Policyholder not found\");\n        return false;\n    }\n    \n    g_contracts.push_back(contract);\n    return true;\n}"}, {"return_type": "bool", "name": "saveEndorsement", "line": 45, "content": "}\n\nbool saveEndorsement(const Endorsement& endorsement) {{\n\n    // Procura o contrato\n    Contract* contract = findContract(endorsement.contractNumber);\n    if(!contract) {\n        setLastError(\"Contract not found\");\n        return false;\n    }\n    \n    // Valida o endosso\n    if(!validateEndorsement(*contract, endorsement)) {\n        return false;\n    }\n    \n    g_endorsements.push_back(endorsement);\n    \n    // Atualiza o contrato se necess\u00e1rio\n    if(endorsement.type == 'I') {  // Increase\n        contract->contractValue += endorsement.changeValue;\n    } else if(endorsement.type == 'D') {  // Decrease\n        contract->contractValue -= endorsement.changeValue;\n    } else if(endorsement.type == 'C') {  // Cancel\n        contract->active = false;\n    }\n    \n    return true;\n}"}, {"return_type": "Policyholder*", "name": "findPolicyholder", "line": 72, "content": "}\n\nPolicyholder* findPolicyholder(int id) {{\n\n    for(size_t i = 0; i < g_policyholders.size(); i++) {\n        if(g_policyholders[i].id == id) {\n            return &g_policyholders[i];\n        }\n    }\n    return NULL;  // Retorno NULL t\u00edpico de c\u00f3digo legado\n}"}, {"return_type": "Contract*", "name": "findContract", "line": 81, "content": "}\n\nContract* findContract(int number) {{\n\n    for(size_t i = 0; i < g_contracts.size(); i++) {\n        if(g_contracts[i].number == number) {\n            return &g_contracts[i];\n        }\n    }\n    return NULL;\n}"}, {"return_type": "Coverage*", "name": "findCoverage", "line": 90, "content": "}\n\nCoverage* findCoverage(int id) {{\n\n    for(size_t i = 0; i < g_coverages.size(); i++) {\n        if(g_coverages[i].id == id) {\n            return &g_coverages[i];\n        }\n    }\n    return NULL;\n}"}, {"return_type": "void", "name": "listPolicyholders", "line": 99, "content": "}\n\nvoid listPolicyholders() {{\n\n    std::cout << \"\\n=== Policyholders List ===\" << std::endl;\n    std::cout << std::setw(5) << \"ID\" << \" | \"\n              << std::setw(40) << \"Name\" << \" | \"\n              << std::setw(15) << \"Document\" << \" | \"\n              << \"Status\" << std::endl;\n    std::cout << std::string(80, '-') << std::endl;\n    \n    for(size_t i = 0; i < g_policyholders.size(); i++) {\n        std::cout << std::setw(5) << g_policyholders[i].id << \" | \"\n                  << std::setw(40) << g_policyholders[i].name << \" | \"\n                  << std::setw(15) << g_policyholders[i].documentNumber << \" | \"\n                  << (g_policyholders[i].active ? \"Active\" : \"Inactive\") << std::endl;\n    }\n}"}, {"return_type": "void", "name": "listContracts", "line": 115, "content": "}\n\nvoid listContracts() {{\n\n    std::cout << \"\\n=== Contracts List ===\" << std::endl;\n    std::cout << std::setw(8) << \"Number\" << \" | \"\n              << std::setw(15) << \"Policy\" << \" | \"\n              << std::setw(10) << \"Value\" << \" | \"\n              << \"Status\" << std::endl;\n    std::cout << std::string(80, '-') << std::endl;\n    \n    for(size_t i = 0; i < g_contracts.size(); i++) {\n        std::cout << std::setw(8) << g_contracts[i].number << \" | \"\n                  << std::setw(15) << g_contracts[i].policyNumber << \" | \"\n                  << std::setw(10) << g_contracts[i].contractValue << \" | \"\n                  << (g_contracts[i].active ? \"Active\" : \"Inactive\") << std::endl;\n    }\n}"}, {"return_type": "void", "name": "listEndorsements", "line": 131, "content": "}\n\nvoid listEndorsements(int contractNumber) {{\n\n    std::cout << \"\\n=== Endorsements for Contract \" << contractNumber << \" ===\" << std::endl;\n    std::cout << std::setw(8) << \"Number\" << \" | \"\n              << std::setw(10) << \"Type\" << \" | \"\n              << std::setw(10) << \"Value\" << \" | \"\n              << \"Date\" << std::endl;\n    std::cout << std::string(80, '-') << std::endl;\n    \n    for(size_t i = 0; i < g_endorsements.size(); i++) {\n        if(g_endorsements[i].contractNumber == contractNumber) {\n            char typeDesc[20];\n            switch(g_endorsements[i].type) {\n                case 'I': strcpy(typeDesc, \"Increase\"); break;\n                case 'D': strcpy(typeDesc, \"Decrease\"); break;\n                case 'C': strcpy(typeDesc, \"Cancel\"); break;\n                default: strcpy(typeDesc, \"Unknown\");\n            }\n            \n            std::cout << std::setw(8) << g_endorsements[i].number << \" | \"\n                      << std::setw(10) << typeDesc << \" | \"\n                      << std::setw(10) << g_endorsements[i].changeValue << \" | \"\n                      << ctime(&g_endorsements[i].endorsementDate);\n        }\n    }\n}"}], "templates": [], "operators": [], "dependencies": ["D:\\pessoal\\projetos\\surety-bond-system\\src\\business.cpp", "D:\\pessoal\\projetos\\surety-bond-system\\src\\database.cpp"], "used_by": ["D:\\pessoal\\projetos\\surety-bond-system\\src\\menu.cpp", "D:\\pessoal\\projetos\\surety-bond-system\\src\\database.cpp", "D:\\pessoal\\projetos\\surety-bond-system\\src\\main.cpp"]}, {"path": "D:\\pessoal\\projetos\\surety-bond-system\\src\\database.h", "type": "header", "includes": ["globals.h"], "namespaces": [], "classes": [], "functions": [], "templates": [], "operators": [], "dependencies": ["D:\\pessoal\\projetos\\surety-bond-system\\src\\globals.h"], "used_by": []}, {"path": "D:\\pessoal\\projetos\\surety-bond-system\\src\\globals.h", "type": "header", "includes": ["time.h", "string.h", "vector"], "namespaces": [], "classes": [], "functions": [], "templates": [], "operators": [], "dependencies": [], "used_by": ["D:\\pessoal\\projetos\\surety-bond-system\\src\\business.h", "D:\\pessoal\\projetos\\surety-bond-system\\src\\menu.cpp", "D:\\pessoal\\projetos\\surety-bond-system\\src\\database.h", "D:\\pessoal\\projetos\\surety-bond-system\\src\\menu.h", "D:\\pessoal\\projetos\\surety-bond-system\\src\\main.cpp"]}, {"path": "D:\\pessoal\\projetos\\surety-bond-system\\src\\main.cpp", "type": "source", "includes": ["menu.h", "globals.h", "iostream", "database.h", "business.h"], "namespaces": [], "classes": [], "functions": [{"return_type": "void", "name": "initializeSystem", "line": 12, "content": ";\n\nvoid initializeSystem() {{\n\n    // Inicializa cobertura padr\u00e3o (comum em sistemas legados ter dados hard-coded)\n    Coverage defaultCoverage;\n    defaultCoverage.id = 1;\n    strcpy(defaultCoverage.name, \"Performance Bond\");\n    strcpy(defaultCoverage.description, \"Default performance bond coverage\");\n    defaultCoverage.maxValue = 1000000.0;\n    defaultCoverage.premiumRate = 0.02;\n    defaultCoverage.active = true;\n    g_coverages.push_back(defaultCoverage);\n\n    defaultCoverage.id = 2;\n    strcpy(defaultCoverage.name, \"Bid Bond\");\n    strcpy(defaultCoverage.description, \"Default bid bond coverage\");\n    defaultCoverage.maxValue = 500000.0;\n    defaultCoverage.premiumRate = 0.015;\n    defaultCoverage.active = true;\n    g_coverages.push_back(defaultCoverage);\n}"}, {"return_type": "int", "name": "main", "line": 32, "content": "}\n\nint main() {{\n\n    initializeSystem();\n    \n    while(1) {\n        showMainMenu();\n        int choice;\n        std::cin >> choice;\n        \n        switch(choice) {\n            case 1:\n                processPolicyholderMenu();\n                break;\n            case 2:\n                processContractMenu();\n                break;\n            case 3:\n                processEndorsementMenu();\n                break;\n            case 4:\n                processReportsMenu();\n                break;\n            case 0:\n                std::cout << \"Exiting system...\" << std::endl;\n                return 0;\n            default:\n                std::cout << \"Invalid option!\" << std::endl;\n        }\n    }\n    \n    return 0;\n}"}], "templates": [], "operators": [], "dependencies": ["D:\\pessoal\\projetos\\surety-bond-system\\src\\business.cpp", "D:\\pessoal\\projetos\\surety-bond-system\\src\\menu.cpp", "D:\\pessoal\\projetos\\surety-bond-system\\src\\globals.h", "D:\\pessoal\\projetos\\surety-bond-system\\src\\database.cpp"], "used_by": []}, {"path": "D:\\pessoal\\projetos\\surety-bond-system\\src\\menu.cpp", "type": "source", "includes": ["menu.h", "globals.h", "iostream", "iomanip", "database.h", "business.h"], "namespaces": ["std"], "classes": [], "functions": [{"return_type": "void", "name": "showMainMenu", "line": 9, "content": ";\n\nvoid showMainMenu() {{\n\n    system(\"cls\"); // Limpa tela (t\u00edpico em sistemas legados)\n    cout << \"\\n=== SURETY BOND SYSTEM ===\" << endl;\n    cout << \"1. Policyholder Management\" << endl;\n    cout << \"2. Contract Management\" << endl;\n    cout << \"3. Endorsement Management\" << endl;\n    cout << \"4. Reports\" << endl;\n    cout << \"0. Exit\" << endl;\n    cout << \"\\nChoice: \";\n}"}, {"return_type": "void", "name": "showPolicyholderMenu", "line": 20, "content": "}\n\nvoid showPolicyholderMenu() {{\n\n    cout << \"\\n=== POLICYHOLDER MENU ===\" << endl;\n    cout << \"1. New Policyholder\" << endl;\n    cout << \"2. List Policyholders\" << endl;\n    cout << \"3. Find Policyholder\" << endl;\n    cout << \"0. Back to Main Menu\" << endl;\n    cout << \"\\nChoice: \";\n}"}, {"return_type": "void", "name": "showContractMenu", "line": 29, "content": "}\n\nvoid showContractMenu() {{\n\n    cout << \"\\n=== CONTRACT MENU ===\" << endl;\n    cout << \"1. New Contract\" << endl;\n    cout << \"2. List Contracts\" << endl;\n    cout << \"3. Find Contract\" << endl;\n    cout << \"0. Back to Main Menu\" << endl;\n    cout << \"\\nChoice: \";\n}"}, {"return_type": "void", "name": "showEndorsementMenu", "line": 38, "content": "}\n\nvoid showEndorsementMenu() {{\n\n    cout << \"\\n=== ENDORSEMENT MENU ===\" << endl;\n    cout << \"1. New Endorsement\" << endl;\n    cout << \"2. List Contract Endorsements\" << endl;\n    cout << \"0. Back to Main Menu\" << endl;\n    cout << \"\\nChoice: \";\n}"}, {"return_type": "void", "name": "processPolicyholderMenu", "line": 46, "content": "}\n\nvoid processPolicyholderMenu() {{\n\n    while(1) {\n        showPolicyholderMenu();\n        int choice;\n        cin >> choice;\n        \n        switch(choice) {\n            case 1: {\n                Policyholder newPolicyholder;\n                inputPolicyholder(newPolicyholder);\n                if(savePolicyholder(newPolicyholder)) {\n                    cout << \"Policyholder saved successfully!\" << endl;\n                } else {\n                    cout << \"Error: \" << getLastError() << endl;\n                }\n                break;\n            }\n            case 2:\n                listPolicyholders();\n                break;\n            case 3: {\n                int id;\n                cout << \"Enter Policyholder ID: \";\n                cin >> id;\n                Policyholder* found = findPolicyholder(id);\n                if(found) {\n                    displayPolicyholder(*found);\n                } else {\n                    cout << \"Policyholder not found!\" << endl;\n                }\n                break;\n            }\n            case 0:\n                return;\n            default:\n                cout << \"Invalid option!\" << endl;\n        }\n        \n        cout << \"\\nPress Enter to continue...\";\n        cin.ignore();\n        cin.get();\n    }\n}"}, {"return_type": "void", "name": "inputPolicyholder", "line": 90, "content": "}\n\nvoid inputPolicyholder(Policyholder& policyholder) {{\n\n    policyholder.id = g_policyholders.size() + 1;  // Identificador sequencial\n    policyholder.active = true;\n    time(&policyholder.registrationDate);\n\n    cin.ignore();\n    cout << \"Name: \";\n    cin.getline(policyholder.name, MAX_NAME_LENGTH);\n    \n    cout << \"Document Number (CNPJ): \";\n    cin.getline(policyholder.documentNumber, MAX_DOC_LENGTH);\n    \n    if(!validateDocumentNumber(policyholder.documentNumber)) {\n        setLastError(\"Invalid document number format\");\n        return;\n    }\n    \n    cout << \"Address:\\n\";\n    cout << \"Street: \";\n    cin.getline(policyholder.address.street, 100);\n    \n    cout << \"Number: \";\n    cin.getline(policyholder.address.number, 20);\n    \n    cout << \"City: \";\n    cin.getline(policyholder.address.city, 50);\n    \n    cout << \"State (2 letters): \";\n    cin.getline(policyholder.address.state, 3);\n    \n    cout << \"ZIP Code: \";\n    cin.getline(policyholder.address.zipCode, 10);\n    \n    cout << \"Phone: \";\n    cin.getline(policyholder.phone, 15);\n}"}, {"return_type": "void", "name": "displayPolicyholder", "line": 127, "content": "}\n\nvoid displayPolicyholder(const Policyholder& p) {{\n\n    cout << \"\\n=== Policyholder Details ===\" << endl;\n    cout << \"ID: \" << p.id << endl;\n    cout << \"Name: \" << p.name << endl;\n    cout << \"Document: \" << p.documentNumber << endl;\n    cout << \"Address: \" << p.address.street << \", \" \n         << p.address.number << endl;\n    cout << \"City: \" << p.address.city << \" - \" \n         << p.address.state << endl;\n    cout << \"ZIP: \" << p.address.zipCode << endl;\n    cout << \"Phone: \" << p.phone << endl;\n    cout << \"Status: \" << (p.active ? \"Active\" : \"Inactive\") << endl;\n}"}, {"return_type": "void", "name": "processContractMenu", "line": 141, "content": "}\n\nvoid processContractMenu() {{\n\n    while(1) {\n        showContractMenu();\n        int choice;\n        cin >> choice;\n        \n        switch(choice) {\n            case 1: {\n                Contract newContract;\n                inputContract(newContract);\n                if(saveContract(newContract)) {\n                    cout << \"Contract saved successfully!\" << endl;\n                } else {\n                    cout << \"Error: \" << getLastError() << endl;\n                }\n                break;\n            }\n            case 2:\n                listContracts();\n                break;\n            case 3: {\n                int number;\n                cout << \"Enter Contract Number: \";\n                cin >> number;\n                Contract* found = findContract(number);\n                if(found) {\n                    displayContract(*found);\n                } else {\n                    cout << \"Contract not found!\" << endl;\n                }\n                break;\n            }\n            case 0:\n                return;\n            default:\n                cout << \"Invalid option!\" << endl;\n        }\n        \n        cout << \"\\nPress Enter to continue...\";\n        cin.ignore();\n        cin.get();\n    }\n}"}, {"return_type": "void", "name": "inputContract", "line": 185, "content": "}\n\nvoid inputContract(Contract& contract) {{\n\n    contract.number = g_contracts.size() + 1;\n    contract.active = true;\n    time(&contract.issueDate);\n    contract.coverageCount = 0;\n\n    cout << \"\\n=== New Contract ===\" << endl;\n    \n    cout << \"Policyholder ID: \";\n    cin >> contract.policyHolderId;\n    \n    if(!findPolicyholder(contract.policyHolderId)) {\n        setLastError(\"Invalid policyholder ID\");\n        return;\n    }\n\n    cout << \"Contract Value: \";\n    cin >> contract.contractValue;\n    \n    if(!validateContractValue(contract.contractValue)) {\n        return;  // Error message already set by validate function\n    }\n\n    // Input dates\n    int year, month, day;\n    cout << \"\\nStart Date (YYYY MM DD): \";\n    cin >> year >> month >> day;\n    \n    struct tm startTm = {0};\n    startTm.tm_year = year - 1900;\n    startTm.tm_mon = month - 1;\n    startTm.tm_mday = day;\n    contract.startDate = mktime(&startTm);\n    \n    cout << \"End Date (YYYY MM DD): \";\n    cin >> year >> month >> day;\n    \n    struct tm endTm = {0};\n    endTm.tm_year = year - 1900;\n    endTm.tm_mon = month - 1;\n    endTm.tm_mday = day;\n    contract.endDate = mktime(&endTm);\n\n    if(!validateContractDates(contract.startDate, contract.endDate)) {\n        return;  // Error message already set by validate function\n    }\n\n    // Input coverages\n    cout << \"\\nAvailable Coverages:\" << endl;\n    for(const auto& cov : g_coverages) {\n        if(cov.active) {\n            cout << cov.id << \". \" << cov.name \n                 << \" (Rate: \" << cov.premiumRate * 100 << \"%)\" << endl;\n        }\n    }\n\n    cout << \"\\nHow many coverages to add? \";\n    int numCoverages;\n    cin >> numCoverages;\n\n    for(int i = 0; i < numCoverages && i < MAX_COVERAGES; i++) {\n        cout << \"Enter coverage ID \" << (i+1) << \": \";\n        int covId;\n        cin >> covId;\n        \n        if(findCoverage(covId)) {\n            contract.coverageIds[contract.coverageCount++] = covId;\n        } else {\n            cout << \"Invalid coverage ID, skipping...\" << endl;\n        }\n    }\n\n    if(contract.coverageCount == 0) {\n        setLastError(\"Contract must have at least one coverage\");\n        return;\n    }\n\n    // Calculate premium\n    contract.premium = calculatePremium(contract);\n    \n    // Generate policy number\n    generatePolicyNumber(contract.policyNumber, contract.number);\n}"}, {"return_type": "void", "name": "displayContract", "line": 269, "content": "}\n\nvoid displayContract(const Contract& c) {{\n\n    cout << \"\\n=== Contract Details ===\" << endl;\n    cout << \"Number: \" << c.number << endl;\n    cout << \"Policy Number: \" << c.policyNumber << endl;\n    \n    Policyholder* ph = findPolicyholder(c.policyHolderId);\n    if(ph) {\n        cout << \"Policyholder: \" << ph->name << endl;\n    }\n    \n    cout << \"Value: $\" << fixed << setprecision(2) << c.contractValue << endl;\n    cout << \"Premium: $\" << c.premium << endl;\n    \n    char buffer[26];\n    ctime_s(buffer, sizeof(buffer), &c.startDate);\n    cout << \"Start Date: \" << buffer;\n    ctime_s(buffer, sizeof(buffer), &c.endDate);\n    cout << \"End Date: \" << buffer;\n    \n    cout << \"Status: \" << (c.active ? \"Active\" : \"Inactive\") << endl;\n    \n    cout << \"\\nCoverages:\" << endl;\n    for(int i = 0; i < c.coverageCount; i++) {\n        Coverage* cov = findCoverage(c.coverageIds[i]);\n        if(cov) {\n            cout << \"- \" << cov->name << endl;\n        }\n    }\n}"}, {"return_type": "void", "name": "processEndorsementMenu", "line": 299, "content": "}\n\nvoid processEndorsementMenu() {{\n\n    while(1) {\n        showEndorsementMenu();\n        int choice;\n        cin >> choice;\n        \n        switch(choice) {\n            case 1: {\n                Endorsement newEndorsement;\n                inputEndorsement(newEndorsement);\n                if(saveEndorsement(newEndorsement)) {\n                    cout << \"Endorsement saved successfully!\" << endl;\n                } else {\n                    cout << \"Error: \" << getLastError() << endl;\n                }\n                break;\n            }\n            case 2: {\n                int contractNumber;\n                cout << \"Enter Contract Number: \";\n                cin >> contractNumber;\n                listEndorsements(contractNumber);\n                break;\n            }\n            case 0:\n                return;\n            default:\n                cout << \"Invalid option!\" << endl;\n        }\n        \n        cout << \"\\nPress Enter to continue...\";\n        cin.ignore();\n        cin.get();\n    }\n}"}, {"return_type": "void", "name": "inputEndorsement", "line": 335, "content": "}\n\nvoid inputEndorsement(Endorsement& endorsement) {{\n\n    endorsement.number = g_endorsements.size() + 1;\n    time(&endorsement.endorsementDate);\n\n    cout << \"\\n=== New Endorsement ===\" << endl;\n    \n    cout << \"Contract Number: \";\n    cin >> endorsement.contractNumber;\n    \n    Contract* contract = findContract(endorsement.contractNumber);\n    if(!contract) {\n        setLastError(\"Contract not found\");\n        return;\n    }\n    \n    if(!contract->active) {\n        setLastError(\"Cannot endorse inactive contract\");\n        return;\n    }\n\n    cout << \"\\nCurrent Contract Value: $\" << contract->contractValue << endl;\n    \n    cout << \"Endorsement Type (I=Increase, D=Decrease, C=Cancel): \";\n    cin >> endorsement.type;\n    endorsement.type = toupper(endorsement.type);\n    \n    if(endorsement.type != 'I' && endorsement.type != 'D' && endorsement.type != 'C') {\n        setLastError(\"Invalid endorsement type\");\n        return;\n    }\n\n    if(endorsement.type != 'C') {\n        cout << \"Change Value: $\";\n        cin >> endorsement.changeValue;\n    } else {\n        endorsement.changeValue = 0;\n    }\n\n    cin.ignore();\n    cout << \"Description: \";\n    cin.getline(endorsement.description, sizeof(endorsement.description));\n}"}, {"return_type": "void", "name": "displayEndorsement", "line": 378, "content": "}\n\nvoid displayEndorsement(const Endorsement& e) {{\n\n    cout << \"\\n=== Endorsement Details ===\" << endl;\n    cout << \"Number: \" << e.number << endl;\n    cout << \"Contract Number: \" << e.contractNumber << endl;\n    \n    char typeDesc[20];\n    switch(e.type) {\n        case 'I': strcpy(typeDesc, \"Increase\"); break;\n        case 'D': strcpy(typeDesc, \"Decrease\"); break;\n        case 'C': strcpy(typeDesc, \"Cancellation\"); break;\n        default: strcpy(typeDesc, \"Unknown\");\n    }\n    \n    cout << \"Type: \" << typeDesc << endl;\n    \n    if(e.type != 'C') {\n        cout << \"Change Value: $\" << fixed << setprecision(2) << e.changeValue << endl;\n    }\n    \n    char buffer[26];\n    ctime_s(buffer, sizeof(buffer), &e.endorsementDate);\n    cout << \"Date: \" << buffer;\n    \n    cout << \"Description: \" << e.description << endl;\n}"}, {"return_type": "void", "name": "showReportsMenu", "line": 404, "content": "}\n\nvoid showReportsMenu() {{\n\n    cout << \"\\n=== REPORTS MENU ===\" << endl;\n    cout << \"1. Active Contracts Summary\" << endl;\n    cout << \"2. Premium by Policyholder\" << endl;\n    cout << \"3. Endorsements History\" << endl;\n    cout << \"0. Back to Main Menu\" << endl;\n    cout << \"\\nChoice: \";\n}"}, {"return_type": "void", "name": "processReportsMenu", "line": 413, "content": "}\n\nvoid processReportsMenu() {{\n\n    while(1) {\n        showReportsMenu();\n        int choice;\n        cin >> choice;\n        \n        switch(choice) {\n            case 1:\n                reportActiveContracts();\n                break;\n            case 2:\n                reportPremiumByPolicyholder();\n                break;\n            case 3:\n                reportEndorsementsHistory();\n                break;\n            case 0:\n                return;\n            default:\n                cout << \"Invalid option!\" << endl;\n        }\n        \n        cout << \"\\nPress Enter to continue...\";\n        cin.ignore();\n        cin.get();\n    }\n}"}, {"return_type": "void", "name": "reportActiveContracts", "line": 441, "content": "}\n\nvoid reportActiveContracts() {{\n\n    cout << \"\\n=== Active Contracts Summary ===\" << endl;\n    cout << setfill('=') << setw(80) << \"=\" << setfill(' ') << endl;\n    cout << setw(10) << \"Number\" << \" | \"\n         << setw(15) << \"Policy\" << \" | \"\n         << setw(15) << \"Value\" << \" | \"\n         << setw(15) << \"Premium\" << \" | \"\n         << \"Policyholder\" << endl;\n    cout << setfill('-') << setw(80) << \"-\" << setfill(' ') << endl;\n    \n    double totalValue = 0.0;\n    double totalPremium = 0.0;\n    int activeCount = 0;\n    \n    for(const auto& contract : g_contracts) {\n        if(contract.active) {\n            Policyholder* ph = findPolicyholder(contract.policyHolderId);\n            cout << setw(10) << contract.number << \" | \"\n                 << setw(15) << contract.policyNumber << \" | \"\n                 << setw(15) << fixed << setprecision(2) << contract.contractValue << \" | \"\n                 << setw(15) << contract.premium << \" | \"\n                 << (ph ? ph->name : \"Unknown\") << endl;\n                 \n            totalValue += contract.contractValue;\n            totalPremium += contract.premium;\n            activeCount++;\n        }\n    }\n    \n    cout << setfill('=') << setw(80) << \"=\" << setfill(' ') << endl;\n    cout << \"Total Active Contracts: \" << activeCount << endl;\n    cout << \"Total Value: $\" << fixed << setprecision(2) << totalValue << endl;\n    cout << \"Total Premium: $\" << totalPremium << endl;\n}"}, {"return_type": "void", "name": "reportPremiumByPolicyholder", "line": 476, "content": "}\n\nvoid reportPremiumByPolicyholder() {{\n\n    cout << \"\\n=== Premium by Policyholder ===\" << endl;\n    cout << setfill('=') << setw(80) << \"=\" << setfill(' ') << endl;\n    cout << setw(40) << \"Policyholder\" << \" | \"\n         << setw(10) << \"Contracts\" << \" | \"\n         << setw(15) << \"Total Value\" << \" | \"\n         << \"Total Premium\" << endl;\n    cout << setfill('-') << setw(80) << \"-\" << setfill(' ') << endl;\n    \n    for(const auto& ph : g_policyholders) {\n        int contractCount = 0;\n        double totalValue = 0.0;\n        double totalPremium = 0.0;\n        \n        // Soma contratos do tomador\n        for(const auto& contract : g_contracts) {\n            if(contract.policyHolderId == ph.id && contract.active) {\n                contractCount++;\n                totalValue += contract.contractValue;\n                totalPremium += contract.premium;\n            }\n        }\n        \n        if(contractCount > 0) {\n            cout << setw(40) << ph.name << \" | \"\n                 << setw(10) << contractCount << \" | \"\n                 << setw(15) << fixed << setprecision(2) << totalValue << \" | \"\n                 << totalPremium << endl;\n        }\n    }\n}"}, {"return_type": "void", "name": "reportEndorsementsHistory", "line": 508, "content": "}\n\nvoid reportEndorsementsHistory() {{\n\n    cout << \"\\n=== Endorsements History ===\" << endl;\n    cout << setfill('=') << setw(80) << \"=\" << setfill(' ') << endl;\n    \n    for(const auto& contract : g_contracts) {\n        bool hasEndorsements = false;\n        \n        // Verifica se contrato tem endossos antes de imprimir cabe\u00e7alho\n        for(const auto& end : g_endorsements) {\n            if(end.contractNumber == contract.number) {\n                if(!hasEndorsements) {\n                    cout << \"\\nContract: \" << contract.number \n                         << \" (Policy: \" << contract.policyNumber << \")\" << endl;\n                    cout << setfill('-') << setw(60) << \"-\" << setfill(' ') << endl;\n                    hasEndorsements = true;\n                }\n                \n                char typeDesc[20];\n                switch(end.type) {\n                    case 'I': strcpy(typeDesc, \"Increase\"); break;\n                    case 'D': strcpy(typeDesc, \"Decrease\"); break;\n                    case 'C': strcpy(typeDesc, \"Cancel\"); break;\n                    default: strcpy(typeDesc, \"Unknown\");\n                }\n                \n                char dateStr[26];\n                ctime_s(dateStr, sizeof(dateStr), &end.endorsementDate);\n                dateStr[24] = '\\0';  // Remove newline\n                \n                cout << dateStr << \" - \" << typeDesc;\n                if(end.type != 'C') {\n                    cout << \" $\" << fixed << setprecision(2) << end.changeValue;\n                }\n                cout << endl;\n                cout << \"Description: \" << end.description << endl;\n            }\n        }\n        \n        if(hasEndorsements) {\n            cout << setfill('-') << setw(60) << \"-\" << setfill(' ') << endl;\n        }\n    }\n}"}], "templates": [], "operators": [], "dependencies": ["D:\\pessoal\\projetos\\surety-bond-system\\src\\business.cpp", "D:\\pessoal\\projetos\\surety-bond-system\\src\\menu.cpp", "D:\\pessoal\\projetos\\surety-bond-system\\src\\globals.h", "D:\\pessoal\\projetos\\surety-bond-system\\src\\database.cpp"], "used_by": ["D:\\pessoal\\projetos\\surety-bond-system\\src\\menu.cpp", "D:\\pessoal\\projetos\\surety-bond-system\\src\\main.cpp"]}, {"path": "D:\\pessoal\\projetos\\surety-bond-system\\src\\menu.h", "type": "header", "includes": ["globals.h"], "namespaces": [], "classes": [], "functions": [], "templates": [], "operators": [], "dependencies": ["D:\\pessoal\\projetos\\surety-bond-system\\src\\globals.h"], "used_by": []}], "dependencies_graph": {"D:\\pessoal\\projetos\\surety-bond-system\\src\\business.cpp": ["D:\\pessoal\\projetos\\surety-bond-system\\src\\business.cpp"], "D:\\pessoal\\projetos\\surety-bond-system\\src\\business.h": ["D:\\pessoal\\projetos\\surety-bond-system\\src\\globals.h"], "D:\\pessoal\\projetos\\surety-bond-system\\src\\database.cpp": ["D:\\pessoal\\projetos\\surety-bond-system\\src\\business.cpp", "D:\\pessoal\\projetos\\surety-bond-system\\src\\database.cpp"], "D:\\pessoal\\projetos\\surety-bond-system\\src\\database.h": ["D:\\pessoal\\projetos\\surety-bond-system\\src\\globals.h"], "D:\\pessoal\\projetos\\surety-bond-system\\src\\globals.h": [], "D:\\pessoal\\projetos\\surety-bond-system\\src\\main.cpp": ["D:\\pessoal\\projetos\\surety-bond-system\\src\\business.cpp", "D:\\pessoal\\projetos\\surety-bond-system\\src\\menu.cpp", "D:\\pessoal\\projetos\\surety-bond-system\\src\\globals.h", "D:\\pessoal\\projetos\\surety-bond-system\\src\\database.cpp"], "D:\\pessoal\\projetos\\surety-bond-system\\src\\menu.cpp": ["D:\\pessoal\\projetos\\surety-bond-system\\src\\business.cpp", "D:\\pessoal\\projetos\\surety-bond-system\\src\\menu.cpp", "D:\\pessoal\\projetos\\surety-bond-system\\src\\globals.h", "D:\\pessoal\\projetos\\surety-bond-system\\src\\database.cpp"], "D:\\pessoal\\projetos\\surety-bond-system\\src\\menu.h": ["D:\\pessoal\\projetos\\surety-bond-system\\src\\globals.h"]}, "build_system": null, "metrics": {"total_components": 8, "total_classes": 0, "total_functions": 35, "total_templates": 0, "total_operators": 0}}